worker_processes  1;

error_log logs/error.log;
pid logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    # ================ Jrebel激活反向代理[不能使用负载均衡来弄...]=========================================
    # upstream jrebelProxy {
    #     server idea.lanyus.com:80;
    #     # server 第二个代理服务器
    # }
	log_format jrebellog '$remote_addr - $remote_user [$time_local] "$request" $upstream_addr '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for"';
    server {
        server_name    127.0.0.1;
        listen         8888;
        # 记录Jrebel的日志
        access_log ./logs/jrebel.log jrebellog;
		
        location       / {
            proxy_pass http://idea.lanyus.com:80;
        }
    }
    #===================================================================================================

    # ===========================企业版测试系统的nginx端口中配置访问我本地的地址============================
    # Nginx地址：192.168.205.114 实际地址：192.168.108.52:8060 应用程序名：zhengc 
    # 方案1️：
    # 访问地址：https://192.168.205.114:8090/zhengc/TPFrame/index.html
    # server {
    #     listen 192.168.108.52:8060;
    #     server_name 192.168.108.52;

    #     # 首先将zhengc应用程序名给去掉
    #     rewrite ^/zhengc/(.+)$ /$1 last;

    #     # 问题1：静态资源的处理
    #     # 问题2：前台发起的rest接口

    #     location /TPFrame {
    #         proxy_pass http://127.0.0.1:8080;
    #     }
    # }
    # 方案2：这种方案公司的安全拦截很严重，需要去配置安全模块【麻烦。。。】
    # 访问地址：https://192.168.205.114:8090/zhengc，其中zhengc作为一个通用应用程序，可重写成TPFrame
    server {
        listen 192.168.108.52:8060;
        server_name 192.168.108.52;
        # 代理配置
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # client_body_in_file_only on;

        # 只有一个应用程序名，当需要TPFrame、TPBidder的时候，需要切换，且两个不能同时存在，待改进
        rewrite ^/zhengc/(.*)$ /TPFrame/$1 last;

        location /TPFrame {
            proxy_pass http://127.0.0.1:8080;
            proxy_set_header referer "http://127.0.0.1:8080";
            proxy_set_header Cookie $http_cookie;
        }

        location /TPBidder {
            proxy_pass http://127.0.0.1:8081;
            proxy_set_header referer "http://127.0.0.1:8081";
            proxy_set_header Cookie $http_cookie;
        }
    }
    # ==================================================================================================
}